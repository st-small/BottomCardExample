//
//  MainViewController.swift
//  BottomCardExample
//
//  Created by –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –®–∏—è–Ω–æ–≤—Å–∫–∏–π on 9/23/19.
//  Copyright ¬© 2019 –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –®–∏—è–Ω–æ–≤—Å–∫–∏–π. All rights reserved.
//

import UIKit

public class MainViewController: UIViewController {
    
    // UI elements
    private let avatarImage: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.image = UIImage(named: "elf")
        imageView.contentMode = .scaleAspectFill
        return imageView
    }()
    
    private let nameLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)
        label.numberOfLines = 0
        label.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
        return label
    }()
    
    private let lastVisitLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.font = UIFont.systemFont(ofSize: 14, weight: .light)
        label.numberOfLines = 0
        label.textColor = #colorLiteral(red: 0.2549019754, green: 0.2745098174, blue: 0.3019607961, alpha: 1)
        return label
    }()
    
    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.font = UIFont.systemFont(ofSize: 12, weight: .regular)
        label.numberOfLines = 0
        label.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
        return label
    }()
    
    private let containerView: UIView = {
        let view = ButtonsContainer()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let reactionAction: UIButton = {
        let button = UIButton(type: .system)
        let font = UIFont.systemFont(ofSize: 16, weight: .bold)
        let attrs: [NSAttributedString.Key: Any] = [
            .font: font,
            .foregroundColor: UIColor.black]
        let attrTitle =
            NSAttributedString(string: "üòÄ –¢–∏–º –ö—É–∫ –∏ 10 –¥—Ä—É–≥–∏—Ö", attributes: attrs)
        button.setAttributedTitle(attrTitle, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    public override func loadView() {
        super.loadView()
        
        view.backgroundColor = .white
    }
    
    public override func viewDidLoad() {
        super.viewDidLoad()
        
        prepareAvatarImage()
        prepareUserDescription()
        prepareMainTextDescription()
        prepareButtonsContainer()
        prepareReactionAction()
    }
    
    private func prepareAvatarImage() {
        view.addSubview(avatarImage)
        
        avatarImage.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16).isActive = true
        avatarImage.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16).isActive = true
        avatarImage.widthAnchor.constraint(equalToConstant: 100).isActive = true
        avatarImage.heightAnchor.constraint(equalToConstant: 100).isActive = true
        
        avatarImage.layer.cornerRadius = 50.0
        avatarImage.clipsToBounds = true
    }
    
    private func prepareUserDescription() {
        view.addSubview(nameLabel)
        
        nameLabel.text = "Tauriel (–õ–µ—Å–Ω–∞—è –¥–µ–≤–∞)"
        nameLabel.leadingAnchor.constraint(equalTo: avatarImage.trailingAnchor, constant: 10).isActive = true
        nameLabel.topAnchor.constraint(equalTo: avatarImage.topAnchor, constant: 10).isActive = true
        nameLabel.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        nameLabel.heightAnchor.constraint(equalToConstant: 25).isActive = true
        
        view.addSubview(lastVisitLabel)
        
        lastVisitLabel.text = "–°–µ–≥–æ–¥–Ω—è –≤ 14:31"
        lastVisitLabel.leadingAnchor.constraint(equalTo: nameLabel.leadingAnchor).isActive = true
        lastVisitLabel.trailingAnchor.constraint(equalTo: nameLabel.trailingAnchor).isActive = true
        lastVisitLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 10).isActive = true
    }
    
    private func prepareMainTextDescription() {
        view.addSubview(descriptionLabel)
        
        let sampleText = "–û–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≥–Ω–æ–º–∞–º, –∫–æ–≥–¥–∞ –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∞–ª–∏ –ø–∞—É–∫–∏ –õ–∏—Ö–æ–ª–µ—Å—å—è, –∏ —Å–ø–∞—Å–∞–µ—Ç –≥–Ω–æ–º–∞ –ö–∏–ª–∏ –æ—Ç –≥–∏–±–µ–ª–∏. –ì–Ω–æ–º—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø–ª–µ–Ω –∫ –ª–µ—Å–Ω—ã–º —ç–ª—å—Ñ–∞–º –õ–∏—Ö–æ–ª–µ—Å—å—è –∏ –∏—Ö –±—Ä–æ—Å–∞—é—Ç –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ. –ü—Ä–∏—á–µ–º –¢–∞—É—Ä–∏—ç–ª—å —Å–∞–º–∞ –æ—Ç–≤–æ–¥–∏—Ç –≤ —Ç–µ–º–Ω–∏—Ü—É –ö–∏–ª–∏ –∏ –ø–æ–∑–¥–Ω–µ–µ –æ–±—â–∞–µ—Ç—Å—è —Å –Ω–∏–º. –ú–µ–∂–¥—É –Ω–∏–º–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —è–≤–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è, –ø–µ—Ä–µ—Ä–∞—Å—Ç–∞—é—â–∞—è –≤ –Ω–µ–≤—ã—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á—É–≤—Å—Ç–≤–∞. –ó–∞—Ç–µ–º –≤ –º–æ–º–µ–Ω—Ç –±–µ—Å–µ–¥—ã –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Å—Ç—Ä–∞–∂–∏ –∏ –∫–æ—Ä–æ–ª—è –ª–µ—Å–Ω—ã—Ö —ç–ª—å—Ñ–æ–≤ –¢—Ä–∞–Ω–¥—É–∏–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Ö–æ–¥–∞ –¢–æ—Ä–∏–Ω–∞ –î—É–±–æ—â–∏—Ç–∞ –Ω–∞ –≠—Ä–µ–±–æ—Ä —Ö–æ–±–±–∏—Ç –ë–∏–ª—å–±–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≥–Ω–æ–º–æ–≤ –∏–∑ –∑–∞—Ç–æ—á–µ–Ω–∏—è –∏ –æ–Ω–∏ –ø—ã—Ç–∞—é—Ç—Å—è –±–µ–∂–∞—Ç—å –≤ –±–æ—á–∫–∞—Ö –ø–æ —Ä–µ–∫–µ. –≠–ª—å—Ñ—ã –ø–æ –ø—Ä–∏–∫–∞–∑—É —É–∑–Ω–∞–≤—à–∏—Ö –æ –ø–æ–±–µ–≥–µ –≥–Ω–æ–º–æ–≤ –õ–µ–≥–æ–ª–∞—Å–∞ –∏ –¢–∞—É—Ä–∏—ç–ª—å –ø—ã—Ç–∞—é—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–Ω–æ–º–æ–≤ –∏ –ø–æ–¥–≤–µ—Ä–≥–∞—é—Ç—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é –æ—Ä–∫–æ–≤ –≤–æ –≥–ª–∞–≤–µ —Å –ë–æ–ª—å–≥–æ–º. –¢–∞—É—Ä–∏—ç–ª—å –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –±–æ–π —Å –æ—Ä–∫–∞–º–∏ –∏ –ø–ª–µ–Ω—è–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ö–∏–ª–∏ –∏ –≤–º–µ—Å—Ç–µ —Å –õ–µ–≥–æ–ª–∞—Å–æ–º —è–≤–ª—è–µ—Ç—Å—è –≤ –≠—Å–≥–∞—Ä–æ—Ç."
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = NSTextAlignment.justified
        paragraphStyle.firstLineHeadIndent = 40.0
        
        let attributedString =
            NSAttributedString(string: sampleText, attributes: [
                NSAttributedString.Key.paragraphStyle: paragraphStyle, NSAttributedString.Key.baselineOffset: NSNumber(value: 0)])

        descriptionLabel.attributedText = attributedString
        
        descriptionLabel.topAnchor.constraint(equalTo: avatarImage.bottomAnchor, constant: 20).isActive = true
        descriptionLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        descriptionLabel.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
    }
    
    private func prepareButtonsContainer() {
        view.addSubview(containerView)
        
        containerView.topAnchor.constraint(equalTo: descriptionLabel.bottomAnchor, constant: 10).isActive = true
        containerView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16).isActive = true
        containerView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16).isActive = true
        containerView.heightAnchor.constraint(equalToConstant: 40).isActive = true
    }
    
    private func prepareReactionAction() {
        view.addSubview(reactionAction)

        reactionAction.topAnchor.constraint(equalTo: containerView.bottomAnchor, constant: 10).isActive = true
        reactionAction.leadingAnchor.constraint(equalTo: containerView.leadingAnchor).isActive = true
        reactionAction.heightAnchor.constraint(equalToConstant: 44).isActive = true

        reactionAction.addTarget(self, action: #selector(reactionTapped), for: .touchUpInside)
    }
    
    @objc private func reactionTapped() {
        let reactionVC = ReactionViewController(image: self.tabBarController?.view.asImage())
        reactionVC.modalPresentationStyle = .fullScreen
        self.present(reactionVC, animated: false, completion: nil)
    }
}
